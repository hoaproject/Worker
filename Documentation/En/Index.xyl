<?xml version="1.0" encoding="utf-8"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
<yield id="chapter">

  <p>Workers frees an application of <strong>heavy</strong> or
  <strong>blocking</strong> tasks. The <code>Hoa\Worker</code> library creates
  and manipulates workers effortlessly.</p>

  <h2 id="Table_of_contents">Table of contents</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p>It is advisable to read the chapter on
  <a href="@hack:chapter=Zombie"><code>Hoa\Zombie</code></a> to learn how to
  transform a processus into a <strong>zombie</strong>. It is the idea behind
  <code>Hoa\Worker</code> to setup a <strong>server</strong> that will receive
  the <strong>messages</strong> after the zombie creation. On each received message,
  an <strong>event</strong> will be issued that we can intercept to execute a
  <strong>task</strong>.</p>
  <p>These tasks can be of several kinds such as sending a notification
  (eg by email),  doing important operations on database, handling many files etc.
  The idea is to <strong>unload</strong> the application from tasks that could
  <strong>slow it down</strong>. These tasks should may be run in
  <strong>parallel</strong> and must not interfere with the execution of the
  application.</p>
  <p>Although the established protocol allows some <strong>integrity</strong>
  and <strong>security</strong> for messages, it is preferable to do communication
  from <strong>server to server</strong> and not through the client.
  <p><code>Hoa\Worker</code> is made of two parts :</p>
  <ul>
    <li><code>Hoa\Worker\Backend\Shared</code> to
    <strong>create</strong> a <strong>shared</strong> worker
    between <strong>many</strong> processes ;</li>
    <li><code>Hoa\Worker\Shared</code> to <strong>send</strong> messages to
    the worker.</li>
  </ul>

  <h2 id="Shared_workers" for="main-toc">Shared workers</h2>

  <p>A worker is primarily <strong>identified</strong> by
  a <code>workerId</code>, sometime abbreviated <code>wid</code>. This identifier
  is used to create a <strong>profile</strong> for our worker thanks to
  <code>Hoa\Worker\Run</code> that does only this.
  Only an identifier and the server address created in the worker are required
  to establish a profile. Then, we can start a worker only from its identifier.</p>
  <p>The first step will be to check that the profile exists through
  <code>Hoa\Worker\Run::widExists</code> method. On the other hand, we will
  create it with the <code>Hoa\Worker\Run::register</code> method. Thus :</p>
  <pre><code class="language-php">if (false === Hoa\Worker\Run::widExists('demorker')) {
    Hoa\Worker\Run::register('demorker', 'tcp://127.0.0.1:123456');
}</code></pre>
  <p>We are now sure that the profile exists. We can then <strong>start</strong>
  our worker. For this, we must use its <strong>identifier</strong> and its
  <strong>password</strong> (requisite to stop it) in the constructor of
  <code>Hoa\Worker\Backend\Shared</code>. After creating the object, it will
  broadcast only one category of <strong>event</strong> : <code>message</code>,
  that we will listen to establish our own task processing <strong>protocol</strong>.
  Finally the <code>Hoa\Worker\Backend\Shared::run</code> starts the worker :</p>
  <pre><code class="language-php">$file   = new Hoa\File\Write(__DIR__ . DS . 'Log');
$worker = new Hoa\Worker\Backend\Shared('demorker', 'iamapassword');
$worker->on('message', function (Hoa\Core\Event\Bucket $bucket) use ($file) {
    // compute messages.
    $data = $bucket->getData();
    $file->writeAll($data['message'] . "\n");
});
$worker->run();
</code></pre>
  <p>We are <strong>free</strong> to do what we want to process the
  <strong>task</strong> !  The format is completely free : binary, compressed,
  command line, serialized object… we can send what we want.</p>

  <h3 id="Where_are_the_wid_profiles_stored" for="main-toc">Where are the
  <code>wid</code> profiles stored ?</h3>

  <p>The workers profiles are stored in the
  <code>hoa://Data/Variable/Run/<em>workerId</em>.wid</code> files. Pay attention
  to verify that this path is well defined, for example by choosing the folder
  <code>/path/to/wid/directory</code> :</p>
  <pre><code class="language-php">Hoa\Core\Core::getInstance()->setProtocol(
    'hoa://Data/Variable/Run',
    '/path/to/wid/directory'
);
var_dump(resolve('hoa://Data/Variable/Run'));

/**
 * Will output:
 *     string(21) "/path/to/wid/directory
 */</code></pre>
  <p>Note that if we use Hoa with its <code>Data/</code> folder, then
  <code>hoa://Data/</code> will be defined <strong>automatically</strong> to this
  folder and we will not need to redefine the protocol. In all cases, it will
  <strong>not be necessary</strong> to modify the code but only the
  <code>hoa://</code> protocol.</p>

  <h2 id="Communicate_with_a_worker" for="main-toc">Communicate with a worker</h2>

  <p>A worker stand for a server, so we will present its <strong>client</strong>
  that allow to <strong>send</strong> him tasks. The client is very easy to use,
  simply instanciate the <code>Hoa\Worker\Shared</code> class specifying the worker
  identifier, then use the proper method to send messages, namely
  <code>Hoa\Worker\Shared::postMessage</code> :</p>
  <pre><code class="language-php">$worker = new Hoa\Worker\Shared('demorker');
$worker->postMessage('mail gordon@freeman.hl Hello Gordon!');</code></pre>
  <p>Of course, the client will seek the worker profile in the
  <code>hoa://Data/Variable/Run/<em>workerId</em>.wid</code> file. If we
   have redefined it in the worker, we will also require to
   redefine it in the client.</p>
  <p>We can use the <code>Hoa\Worker\Shared::postMessage</code> method as many
  times as we wish but beware, it connects and disconnects <strong>each
  time</ strong> to the worker to not disturb the execution of our main
  application. We must then consider sending the <strong>maximum</strong> of
  informations everytime (e.g. through an array, the data are serialized in
  all cases).</p>
  
  <h2 id="Use_dedicated_commands" for="main-toc">Use dedicated commands</h2>

  <p>Pour exécuter un worker, il faut avant tout démarrer
  <a href="http://php.net/install.fpm">PHP FPM</a> :</p>
  <pre><code class="language-shell">$ php-fpm -d listen=127.0.0.1:9000</code></pre>
  <p>Ensuite, pour <strong>démarrer</strong> notre worker,
  nous allons utiliser Hoa en ligne de commande, et plus particulièrement la
  commande <code>worker:start</code>. Elle n'est qu'un alias pratique vers
  <code>Hoa\Worker\Backend\Shared::start</code> qui nécessite l'adresse de
  PHP FPM (par défaut <code>127.0.0.1:9000</code>) et le chemin vers le fichier
  qui contient notre worker :</p>
  <pre><code class="language-shell">$ hoa worker:start /path/to/your/worker.php</code></pre>
  <p>Pour vérifier que notre worker a été créé, nous pouvons
  utiliser la commande <code>worker:status</code> qui va nous retourner la
  <strong>liste</strong> de tous les workers ainsi que des
  <strong>informations</strong> et <strong>statistiques</strong> associées comme
  les identifiants, adresses des serveurs, âge, consommation mémoire actuelle,
  moyenne et maximum etc. En réalité, elle n'est qu'un alias vers
  <code>Hoa\Worker\Shared::getInformations()</code>. Ainsi :</p>
  <pre><code class="language-shell">$ hoa worker:status --run /path/to/wid/directory/
Shared worker informations

ID        PID   Socket                  Uptime      Messages  Last
demorker  2465  tcp://127.0.0.1:123456  0d00:03:15  0         -

demorker  ||||||||||||||||||||||||||||||||||||   |  1,398Kb 1,398Kb 1,536Kb

1 shared worker is running.</code></pre>
  <p>Note : le code couleur n'apparaît pas dans l'exemple.</p>
  <p>Notre worker est maintenant en place. Nous pouvons
  <strong>exécuter</strong> le client sans problème (en ligne de commande,
  <em>via</em> un navigateur, peu importe) !</p>
  <p>Enfin, pour <strong>arrêter</strong> le worker
  proprement, nous avons la commande <code>worker:stop</code>, qui n'est qu'un
  alias de <code>Hoa\Worker\Backend\Shared</code>, nécessitant l'identifiant du
  worker et son <strong>mot de passe</strong> :</p>
  <pre><code class="language-shell">$ hoa worker:stop --run /path/to/wid/directory/ demorker
Password: ▋</code></pre>
  <p>If password is correct, the worker will be stopped and the client won't be
  able to communicate with it and will throw a
  <code>Hoa\Worker\Exception</code> exception.</p>

  <h2 id="Conclusion" for="main-toc">Conclusion</h2>

  <p><code>Hoa\Worker</code> ia a demonstration of what it is possible to build
  with <a href="@hack:chapter=Zombie"><code>Hoa\Zombie</code></a> but not only.
  Il remplit parfaitement son rôle à savoir
  <strong>décharger</strong> l'application de traitements
  <strong>lourds</strong> et <strong>bloquants</strong>. Les commandes
  <code>worker:<em>*</em></code> permettent d'<strong>administrer</strong> ces
  workers à moindre efforts. Rien ne vous empêche de bâtir
  votre <strong>propre</strong> solution à partir des concepts évoqués ici !</p>

</yield>
</overlay>
